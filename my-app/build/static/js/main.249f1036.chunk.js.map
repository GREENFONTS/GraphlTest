{"version":3,"sources":["queries/queries.js","Components/BookDetails.js","Components/AddBook.js","Components/BookList.js","App.js","index.js"],"names":["AuthorsQuery","gql","BooksQuery","AddBookMutation","AddAuthor","getBook","BookDetails","Data","this","props","data","book","loading","id","className","name","genre","author","nationality","books","map","key","DisplayDetails","Component","graphql","options","variables","bookid","AddBook","state","BookName","Genre","AuthorId","AuthorName","Nationality","BookDisplay","AuthorDisplay","getAuthors","disabled","authors","value","e","AddBooks","Name","authorid","refetchQueries","query","error","console","log","alert","onSubmit","BookPost","bind","type","placeholder","onChange","setState","target","required","DisplayAuthors","AuthorPost","AuthorForm","BookForm","Displaychoice","onClick","compose","BookList","clicked","DisplayBooks","client","ApolloClient","uri","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.249f1036.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\n\r\nconst AuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst BooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorid: ID!) {\r\n    addBook(Name: $name, Genre: $genre, AuthorId: $authorid) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddAuthor = gql`\r\n  mutation($name: String!, $nationality: String!) {\r\n    addAuthor(Name: $name, nationality: $nationality) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBook = gql`\r\nquery($id:String){\r\n    book(id:$id){\r\n        name \r\n        genre\r\n        id\r\n        author{\r\n            name \r\n            nationality \r\n            id \r\n            books{\r\n                name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport { BooksQuery, AddBookMutation, AuthorsQuery, getBook, AddAuthor };\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBook } from \"../queries/queries\";\r\n\r\nclass BookDetails extends Component {\r\n\r\n    DisplayDetails() {\r\n      let Data = this.props.data;\r\n        const { book } = this.props.data\r\n        if (Data.loading) {\r\n            return <div>Books Details Loading...</div>;\r\n        } else {\r\n            if (book) {\r\n                return (\r\n                  <div id=\"Book-Details\">\r\n                    <h3 className=\"p-2\"> {book.name}</h3>\r\n                    <p className=\"p-2\">Genre: {book.genre}</p>\r\n                    <p className=\"p-2\">Author: {book.author.name}</p>\r\n                    <p className=\"p-2\">Author's Nationality: {book.author.nationality}</p>\r\n                    <hr />\r\n                    <h5 className=\"p-2\">Books by the Author</h5>\r\n                    {book.author.books.map((book) => {\r\n                      return (\r\n                        <ul className=\"p-2\">\r\n                          <li key={book.id}>{book.name}</li>\r\n                        </ul>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                  <div>\r\n                    <hr />\r\n                    No book selected...\r\n                  </div>\r\n                );\r\n            }\r\n    }\r\n  }\r\n\r\n    render() {\r\n      \r\n    return (\r\n      <div className=\"container\">\r\n        {this.DisplayDetails()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getBook, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.bookid\r\n            }\r\n        }\r\n    }\r\n})(BookDetails);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { compose } from \"recompose\";\r\nimport{ AuthorsQuery, AddBookMutation, BooksQuery, AddAuthor} from \"../queries/queries\"\r\n\r\nclass AddBook extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            BookName: \"\",\r\n            Genre: \"\",\r\n          AuthorId: \"\",\r\n          AuthorName: \"\",\r\n          Nationality: \"\",\r\n          BookDisplay: false,\r\n            AuthorDisplay: true\r\n        }\r\n    }\r\n\r\n  DisplayAuthors() {\r\n    let Data = this.props.getAuthors\r\n    if (Data.loading) {\r\n      return (\r\n        <option disabled>Authors Loading...</option>\r\n      )\r\n    }\r\n    else {\r\n     \r\n        return Data.authors.map(author => {\r\n          return (\r\n            <option key={author.id} value={author.id}> {author.name}</option>\r\n          )\r\n        })\r\n      }\r\n  }\r\n      \r\n    BookPost(e) {\r\n\r\n      try {\r\n      this.props.AddBooks({\r\n          variables: {\r\n            name: this.state.Name,\r\n            genre: this.state.Genre,\r\n            authorid: this.state.AuthorId,\r\n          },\r\n          refetchQueries: [{ query: BooksQuery }],\r\n       });\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n      \r\n    \r\n       \r\n  }\r\n\r\n  async AuthorPost(e) {\r\n    console.log(this.state)\r\n    try {\r\n       await this.props.AddAuthor({\r\n         variables: {\r\n           name: this.state.AuthorName,\r\n           nationality: this.state.Nationality\r\n         },\r\n       });\r\n      \r\n    } catch (error) {\r\n      console.log(\"name already exists\")\r\n      return (\r\n        alert(\r\n          \"Author has Already been Registered\"       \r\n        )\r\n      )\r\n        }\r\n \r\n    \r\n  }\r\n  \r\n BookForm() {\r\n    return (\r\n      <form onSubmit={this.BookPost.bind(this)} className=\"container p-3\">\r\n        <div className=\"form-group\">\r\n          <label>Book Name:</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"Name\"\r\n            placeholder=\"Enter book name\"\r\n            id=\"Name\"\r\n            onChange={(e) => {\r\n              this.setState({ Name: e.target.value });\r\n            }}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Book Genre:</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"Genre\"\r\n            placeholder=\"Enter book genre\"\r\n            id=\"Genre\"\r\n            onChange={(e) => {\r\n              this.setState({ Genre: e.target.value });\r\n            }}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Author: </label>\r\n          <select\r\n            id=\"authors\"\r\n            className=\"form-control\"\r\n            onChange={(e) => {\r\n              this.setState({ AuthorId: e.target.value });\r\n            }}\r\n            required\r\n          >\r\n            <option>Select Author</option>\r\n            {this.DisplayAuthors()}\r\n          </select>\r\n        </div>\r\n\r\n        <button type=\"submit\" id=\"addbutton\">\r\n          +\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  AuthorForm() {\r\n    return (\r\n      <form onSubmit={this.AuthorPost.bind(this)} className=\"container p-3\">\r\n        <div className=\"form-group\">\r\n          <label>Author: </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter Author name\"\r\n            onChange={(e) => {\r\n              this.setState({ AuthorName: e.target.value });\r\n            }}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Author's Nationality: </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter Author's Nationality\"\r\n            onChange={(e) => {\r\n              this.setState({ Nationality: e.target.value });\r\n            }}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" id=\"addbutton\">\r\n          +\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n  \r\n\r\n  Displaychoice(e) {\r\n    if (this.state.AuthorDisplay === true) {\r\n      return (\r\n      this.AuthorForm() \r\n      )\r\n    }\r\n    else {\r\n      return(\r\n        this.BookForm()\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        {this.Displaychoice()}\r\n        <button\r\n          className=\"btn btn-info mr-1 mt-2\"\r\n          onClick={(e) => {\r\n            this.setState({\r\n              AuthorDisplay: true,\r\n              BookDisplay: false,\r\n            });\r\n          }}\r\n        >\r\n          Add Author\r\n        </button>\r\n        <button\r\n          className=\"btn btn-info ml-2 mt-2\"\r\n          onClick={(e) => {\r\n            this.setState({\r\n              AuthorDisplay: false,\r\n              BookDisplay: true,\r\n            });\r\n          }}\r\n        >\r\n          Add Book\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(AuthorsQuery, { name: \"getAuthors\" }),\r\n  graphql(AddBookMutation, { name: \"AddBooks\" }),\r\n  graphql(AddAuthor, { name: \"AddAuthor\" })\r\n)(AddBook);\r\n\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { BooksQuery } from \"../queries/queries\";\r\nimport  BookDetails  from \"./BookDetails\";\r\nimport AddAuthor from \"./AddBook\";\r\n\r\nclass BookList extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state =\r\n    ({\r\n        clicked: \"\"\r\n    })\r\n  }\r\n\r\n  DisplayBooks() {\r\n\r\n    let Data = this.props.data;\r\n    \r\n      if (Data.loading) {\r\n        return (\r\n          <div>Books Loading...</div>\r\n        )\r\n      }\r\n      else {\r\n        return  Data.books.map(book => {\r\n            return (\r\n              <li key={book.id} onClick={(e => this.setState({ clicked: book.id }))} className=\"d-inline-block\" id=\"BookList\"> {book.name}</li>\r\n            )\r\n          })\r\n        }\r\n\r\n      \r\n    }\r\n    \r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"row pt-3 ml-2\">\r\n        <div className=\"col-md-6 m-1\" id=\"books-container\">\r\n          <ul className=\" container p-0\">\r\n            {this.DisplayBooks()}\r\n          </ul>\r\n          <AddAuthor />\r\n        </div>\r\n        <div className=\"col-md-5 container-fluid\" id=\"book-Display\">\r\n          <BookDetails bookid={this.state.clicked} />\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n}\r\n\r\nexport default graphql(BooksQuery)(BookList);\r\n","import React from 'react';\nimport \"./index.css\";\nimport BookList from \"./Components/BookList\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nconst App = () => {\n  // let BookName = document.getElementById('Name')\n  \n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <h1 className=\"header text-center p-3\" id=\"header-text\"> My BookList</h1>\n        <div className=\"container-fluid m-2\">  \n        <BookList />\n          \n        </div>\n        </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}